// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
    Not(in = zx, out = Notzx);
	And(a = x[0], b = Notzx, out = newx0);
	And(a = x[1], b = Notzx, out = newx1);
	And(a = x[2], b = Notzx, out = newx2);
	And(a = x[3], b = Notzx, out = newx3);
	And(a = x[4], b = Notzx, out = newx4);
	And(a = x[5], b = Notzx, out = newx5);
	And(a = x[6], b = Notzx, out = newx6);
	And(a = x[7], b = Notzx, out = newx7);
	And(a = x[8], b = Notzx, out = newx8);
	And(a = x[9], b = Notzx, out = newx9);
	And(a = x[10], b = Notzx, out = newx10);
	And(a = x[11], b = Notzx, out = newx11);
	And(a = x[12], b = Notzx, out = newx12);
	And(a = x[13], b = Notzx, out = newx13);
	And(a = x[14], b = Notzx, out = newx14);
	And(a = x[15], b = Notzx, out = newx15);
	
	Xor(a = newx0, b = nx, out = finalx0);
	Xor(a = newx1, b = nx, out = finalx1);
	Xor(a = newx2, b = nx, out = finalx2);
	Xor(a = newx3, b = nx, out = finalx3);
	Xor(a = newx4, b = nx, out = finalx4);
	Xor(a = newx5, b = nx, out = finalx5);
	Xor(a = newx6, b = nx, out = finalx6);
	Xor(a = newx7, b = nx, out = finalx7);
	Xor(a = newx8, b = nx, out = finalx8);
	Xor(a = newx9, b = nx, out = finalx9);
	Xor(a = newx10, b = nx, out = finalx10);
	Xor(a = newx11, b = nx, out = finalx11);
	Xor(a = newx12, b = nx, out = finalx12);
	Xor(a = newx13, b = nx, out = finalx13);
	Xor(a = newx14, b = nx, out = finalx14);
	Xor(a = newx15, b = nx, out = finalx15);
	//
	Not(in = zy, out = Notzy);
	And(a = y[0], b = Notzy, out = newy0);
	And(a = y[1], b = Notzy, out = newy1);
	And(a = y[2], b = Notzy, out = newy2);
	And(a = y[3], b = Notzy, out = newy3);
	And(a = y[4], b = Notzy, out = newy4);
	And(a = y[5], b = Notzy, out = newy5);
	And(a = y[6], b = Notzy, out = newy6);
	And(a = y[7], b = Notzy, out = newy7);
	And(a = y[8], b = Notzy, out = newy8);
	And(a = y[9], b = Notzy, out = newy9);
	And(a = y[10], b = Notzy, out = newy10);
	And(a = y[11], b = Notzy, out = newy11);
	And(a = y[12], b = Notzy, out = newy12);
	And(a = y[13], b = Notzy, out = newy13);
	And(a = y[14], b = Notzy, out = newy14);
	And(a = y[15], b = Notzy, out = newy15);
	
	Xor(a = newy0, b = ny, out = finaly0);
	Xor(a = newy1, b = ny, out = finaly1);
	Xor(a = newy2, b = ny, out = finaly2);
	Xor(a = newy3, b = ny, out = finaly3);
	Xor(a = newy4, b = ny, out = finaly4);
	Xor(a = newy5, b = ny, out = finaly5);
	Xor(a = newy6, b = ny, out = finaly6);
	Xor(a = newy7, b = ny, out = finaly7);
	Xor(a = newy8, b = ny, out = finaly8);
	Xor(a = newy9, b = ny, out = finaly9);
	Xor(a = newy10, b = ny, out = finaly10);
	Xor(a = newy11, b = ny, out = finaly11);
	Xor(a = newy12, b = ny, out = finaly12);
	Xor(a = newy13, b = ny, out = finaly13);
	Xor(a = newy14, b = ny, out = finaly14);
	Xor(a = newy15, b = ny, out = finaly15);
	
	Xor(a = finalx0, b = finaly0, out = xorSum0);
	Xor(a = finalx1, b = finaly1, out = xorSum1);
	Xor(a = finalx2, b = finaly2, out = xorSum2);
	Xor(a = finalx3, b = finaly3, out = xorSum3);
	Xor(a = finalx4, b = finaly4, out = xorSum4);
	Xor(a = finalx5, b = finaly5, out = xorSum5);
	Xor(a = finalx6, b = finaly6, out = xorSum6);
	Xor(a = finalx7, b = finaly7, out = xorSum7);
	Xor(a = finalx8, b = finaly8, out = xorSum8);
	Xor(a = finalx9, b = finaly9, out = xorSum9);
	Xor(a = finalx10, b = finaly10, out = xorSum10);
	Xor(a = finalx11, b = finaly11, out = xorSum11);
	Xor(a = finalx12, b = finaly12, out = xorSum12);
	Xor(a = finalx13, b = finaly13, out = xorSum13);
	Xor(a = finalx14, b = finaly14, out = xorSum14);
	Xor(a = finalx15, b = finaly15, out = xorSum15);
	
	And(a = finalx0, b = finaly0, out = sum0);
	And(a = finalx1, b = finaly1, out = sum1);
	And(a = finalx2, b = finaly2, out = sum2);
	And(a = finalx3, b = finaly3, out = sum3);
	And(a = finalx4, b = finaly4, out = sum4);
	And(a = finalx5, b = finaly5, out = sum5);
	And(a = finalx6, b = finaly6, out = sum6);
	And(a = finalx7, b = finaly7, out = sum7);
	And(a = finalx8, b = finaly8, out = sum8);
	And(a = finalx9, b = finaly9, out = sum9);
	And(a = finalx10, b = finaly10, out = sum10);
	And(a = finalx11, b = finaly11, out = sum11);
	And(a = finalx12, b = finaly12, out = sum12);
	And(a = finalx13, b = finaly13, out = sum13);
	And(a = finalx14, b = finaly14, out = sum14);
	And(a = finalx15, b = finaly15, out = sum15);
	
	Add16(a[0] = sum0,a[1] = sum1,a[2] = sum2,a[3] = sum3,a[4] = sum4,a[5] = sum5,a[6] = sum6,a[7] = sum7,a[8] = sum8,a[9] = sum9,a[10] = sum10,a[11] = sum11,a[12] = sum12,a[13] = sum13,a[14] = sum14,a[15] = sum15,b[0] = xorSum0,b[1] = xorSum1,b[2] = xorSum2,b[3] = xorSum3,b[4] = xorSum4,b[5] = xorSum5,b[6] = xorSum6,b[7] = xorSum7,b[8] = xorSum8,b[9] = xorSum9,b[10] = xorSum10,b[11] = xorSum11,b[12] = xorSum12,b[13] = xorSum13,b[14] = xorSum14,b[15] = xorSum15,out[0] = tempSum0,out[1] = tempSum1,out[2] = tempSum2,out[3] = tempSum3,out[4] = tempSum4,out[5] = tempSum5,out[6] = tempSum6,out[7] = tempSum7,out[8] = tempSum8,out[9] = tempSum9,out[10] = tempSum10,out[11] = tempSum11,out[12] = tempSum12,out[13] = tempSum13,out[14] = tempSum14,out[15] = tempSum15);
	
	And(a = tempSum0, b = f, out = carry0);
	And(a = tempSum1, b = f, out = carry1);
	And(a = tempSum2, b = f, out = carry2);
	And(a = tempSum3, b = f, out = carry3);
	And(a = tempSum4, b = f, out = carry4);
	And(a = tempSum5, b = f, out = carry5);
	And(a = tempSum6, b = f, out = carry6);
	And(a = tempSum7, b = f, out = carry7);
	And(a = tempSum8, b = f, out = carry8);
	And(a = tempSum9, b = f, out = carry9);
	And(a = tempSum10, b = f, out = carry10);
	And(a = tempSum11, b = f, out = carry11);
	And(a = tempSum12, b = f, out = carry12);
	And(a = tempSum13, b = f, out = carry13);
	And(a = tempSum14, b = f, out = carry14);
	And(a = tempSum15, b = f, out = carry15)
	
	Add16(a[0] = sum0,a[1] = sum1,a[2] = sum2,a[3] = sum3,a[4] = sum4,a[5] = sum5,a[6] = sum6,a[7] = sum7,a[8] = sum8,a[9] = sum9,a[10] = sum10,a[11] = sum11,a[12] = sum12,a[13] = sum13,a[14] = sum14,a[15] = sum15,b[0] = carry0,b[1] = carry1,b[2] = carry2,b[3] = carry3,b[4] = carry4,b[5] = carry5,b[6] = carry6,b[7] = carry7,b[8] = carry8,b[9] = carry9,b[10] = carry10,b[11] = carry11,b[12] = carry12,b[13] = carry13,b[14] = carry14,b[15] = carry15,out[0] = tmpOut0,out[1] = tmpOut1,out[2] = tmpOut2,out[3] = tmpOut3,out[4] = tmpOut4,out[5] = tmpOut5,out[6] = tmpOut6,out[7] = tmpOut7,out[8] = tmpOut8,out[9] = tmpOut9,out[10] = tmpOut10,out[11] = tmpOut11,out[12] = tmpOut12,out[13] = tmpOut13,out[14] = tmpOut14,out[15] = tmpOut15);
	
	Xor(a = tmpOut0, b = no, out = out0);
	Xor(a = tmpOut1, b = no, out = out1);
	Xor(a = tmpOut2, b = no, out = out2);
	Xor(a = tmpOut3, b = no, out = out3);
	Xor(a = tmpOut4, b = no, out = out4);
	Xor(a = tmpOut5, b = no, out = out5);
	Xor(a = tmpOut6, b = no, out = out6);
	Xor(a = tmpOut7, b = no, out = out7);
	Xor(a = tmpOut8, b = no, out = out8);
	Xor(a = tmpOut9, b = no, out = out9);
	Xor(a = tmpOut10, b = no, out = out10);
	Xor(a = tmpOut11, b = no, out = out11);
	Xor(a = tmpOut12, b = no, out = out12);
	Xor(a = tmpOut13, b = no, out = out13);
	Xor(a = tmpOut14, b = no, out = out14);
	Xor(a = tmpOut15, b = no, out = out15);
	
	Or8Way(in[0] = out0,in[1] = out1,in[2] = out2,in[3] = out3,in[4] = out4,in[5] = out5,in[6] = out6,in[7] = out7, out = orOut1);
	Or8Way(in[0] = out8,in[1] = out9,in[2] = out10,in[3] = out11,in[4] = out12,in[5] = out13,in[6] = out14,in[7] = out15, out = orOut2);
	Or(a = orOut1, b = orOut2, out = orOut3);
	Not(in = orOut3, out = zr);
	Or(a = false, b = out15, out = ng);
	
	Or(a = false, b = out0, out = out[0]);
	Or(a = false, b = out1, out = out[1]);
	Or(a = false, b = out2, out = out[2]);
	Or(a = false, b = out3, out = out[3]);
	Or(a = false, b = out4, out = out[4]);
	Or(a = false, b = out5, out = out[5]);
	Or(a = false, b = out6, out = out[6]);
	Or(a = false, b = out7, out = out[7]);
	Or(a = false, b = out8, out = out[8]);
	Or(a = false, b = out9, out = out[9]);
	Or(a = false, b = out10, out = out[10]);
	Or(a = false, b = out11, out = out[11]);
	Or(a = false, b = out12, out = out[12]);
	Or(a = false, b = out13, out = out[13]);
	Or(a = false, b = out14, out = out[14]);
	Or(a = false, b = out15, out = out[15]);
}
