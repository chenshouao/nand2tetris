// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    And(a = true, b = instruction[15], out = instruction[15]); //A-instruction or C-instruction
    Mux16(a = instruction, b = aluoutput, sel = instruction[15], out = outmux1); //A-inst instruction is an address

    Mux(a = true, b = instruction[5], sel = instruction[15], out = loadareg); 
    ARegister(in = outmux1, load = loadareg, out[0..14] = addressM, out = outareg);

    Mux(a = false, b = instruction[4], sel = instruction[15], out = loaddreg);
    DRegister(in = aluoutput, load = loaddreg, out = outdreg);

    Mux16(a = outareg, b = inM, sel = instruction[12], out = outmux2);
    ALU(x = outdreg, y = outmux2, zx = instruction[11], nx = instruction[10],
        zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6],
        out = aluoutput, out = outM, zr = aluzr, ng = alung);

    Mux(a = false, b = instruction[3], sel = instruction[15], out = writeM);

    /*
        ng  zr  po
        1   0   0
        0   1   0
        0   0   1
        1   1   not exit    
    */
    Or(a = alung, b = aluzr, out = ngorzr);
    Not(in = ngorzr, out = alupo);
    And(a = alung, b = instruction[2], out = cmp2); 
    And(a = aluzr, b = instruction[1], out = cmp1);
    And(a = alupo, b = instruction[0], out = cmp0);
    Or(a = cmp0, b = cmp1, out = cmp01);
    Or(a = cmp01, b = cmp2, out = cmp012);
    /*
    C-inst: ALU sign bits & the c-inst jjj bits not equals 0
    A-inst: never jump
    */
    And(a = instruction[15], b = cmp012, out = jmp);

    PC(in = outareg, load = jmp, inc = true, reset = reset, out[0..14] = pc);

}